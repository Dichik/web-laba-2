{"version":3,"sources":["Spinner.js","App.js","index.js"],"names":["ContainerLoader","styled","div","Spinner","type","color","height","width","timeout","App","useState","name","setName","email","setEmail","textMessage","setTextMessage","submitBlocked","setSubmitBlocked","activeField","setActiveField","loading","setLoading","regEmail","showErrorMessage","str","errorNumber","alert","notEmpty","wait","a","setTimeout","console","log","submitData","test","sendEmail","resetData","emailjs","init","form","send","then","result","text","error","className","placeholder","value","onChange","event","target","onFocus","onBlur","style","borderBottom","onClick","disabled","background","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e6f128f.chunk.js","sourcesContent":["import './App.css'\nimport Loader from 'react-loader-spinner'\nimport './App.css'\nimport styled from 'styled-components';\n\nfunction Spinner() {\n    return (\n        <ContainerLoader>\n            <Loader\n                type={\"Puff\"}\n                color={\"#00BFFF\"}\n                height={100}\n                width={100}\n                timeout={3000} // 30 seconds\n            />\n        </ContainerLoader>\n    );\n}\n\nconst ContainerLoader = styled.div`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`\n\nexport default Spinner;","import './App.css';\nimport {useState} from \"react\";\nimport Spinner from \"./Spinner\";\nimport emailjs from 'emailjs-com'\n\nfunction App() {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [textMessage, setTextMessage] = useState(\"\");\n    const [submitBlocked, setSubmitBlocked] = useState(false);\n    const [activeField, setActiveField] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    let regEmail = /^[a-zA-Z-0-9]+@[a-zA-Z-0-9]+\\.[A-Za-z]+$/\n\n    const showErrorMessage = (str, errorNumber) => {\n        if(errorNumber === 1) {\n            alert(\"There is an empty string...\");\n        } else if(errorNumber === 2) {\n            alert(\"There is something wrong with your email...\");\n        } else if(errorNumber === 3) {\n            alert(str)\n        }\n    }\n\n    const notEmpty = (str) => {\n        if(str === \"\") {\n            showErrorMessage(str, 1);\n            return false;\n        }\n        return true;\n    }\n\n    const checkEmail = () => {\n        if(!regEmail.test(email)) {\n            showErrorMessage(email, 2)\n            return false;\n        }\n        return true;\n    }\n\n    const wait = async () => {\n        setTimeout(() => console.log(\"Loading...\"), 5000)\n    }\n\n    const submitData = async () => {\n        if (!submitBlocked) {\n            setSubmitBlocked(true);\n            if (notEmpty(name) && notEmpty(textMessage) && checkEmail()) {\n                setLoading(true)\n                await wait()\n                await sendEmail(name, email, textMessage)\n            } else setSubmitBlocked(false);\n        }\n    }\n\n    // TODO ліміт запитів до 1000\n\n    const resetData = async () => {\n        setName(\"\");\n        setEmail(\"\");\n        setTextMessage(\"\");\n        setSubmitBlocked(false);\n        setActiveField(0);\n        setLoading(false)\n    }\n\n    const allFieldsEmpty = () => {\n        return (email === \"\" && name === \"\" && textMessage === \"\");\n    }\n\n    const showMessageAboutSuccess = () => {\n        alert(\"Your message was successfully sent\")\n        resetData()\n    }\n\n    const sendEmail = async () => {\n        emailjs.init(\"user_AJGy3zMpNl2Rxs4CFFafD\");\n        let form = {\n            name: name,\n            email: email,\n            textMessage: textMessage\n        }\n        emailjs.send('service_tauvzqc', 'template_26nh4ab', form)\n            .then((result) => {\n                console.log(result.text);\n                showMessageAboutSuccess();\n            }, (error) => {\n                console.log(error.text);\n                showErrorMessage(\"Error, your message wasn't sent\", 3)\n            });\n    }\n\n  return (\n      <div>\n          { !loading ?\n          <div>\n              <header className={\"headerClass\"}>\n                  <h1>Sending message</h1>\n              </header>\n              <input type={\"name\"} placeholder={\"Enter your name\"}\n                     className={\"inputField nameInputField centerBlock\"}\n                     value={name}\n                     onChange={event => setName(event.target.value)}\n                     onFocus={() => setActiveField(1)}\n                     onBlur={() => setActiveField(0)}\n                     style={{\n                         borderBottom: activeField === 1 ? '3px solid #10fc2a' : null\n                     }}\n                  // TODO light-green color if a field is filled\n              />\n              <input type={\"email\"} placeholder={\"Enter your email\"}\n                     value={email}\n                     onChange={(event => setEmail(event.target.value))}\n                     onFocus={() => setActiveField(2)}\n                     onBlur={() => setActiveField(0)}\n                     style={{\n                         borderBottom: activeField === 2 ? '3px solid #10fc2a' : null\n                     }}\n                     className={\"inputField emailInputField centerBlock\"}\n              />\n              {/*TODO red color if a field has error for a 3 seconds*/}\n              <input type={\"text\"} placeholder={\"Enter your message here\"}\n                     value={textMessage}\n                     onChange={event => setTextMessage(event.target.value)}\n                     className={\"inputField textField centerBlock\"}\n                     onFocus={() => setActiveField(3)}\n                     onBlur={() => setActiveField(0)}\n                     style={{\n                         borderBottom: activeField === 3 ? '3px solid #10fc2a' : null\n                     }}\n              />\n              <button className={\"centerBlock submitButton\"}\n                      onClick={submitData}\n                      disabled={submitBlocked}\n                      style={{\n                          background: submitBlocked ? '#05acbb' : null\n                      }}\n              >\n                  Submit\n              </button>\n              <button className={\"centerBlock resetButton\"}\n                      disabled={allFieldsEmpty()}\n                      onClick={resetData}>\n                  Clear\n              </button>\n          </div> : Spinner()\n          }\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}