{"ast":null,"code":"var _jsxFileName = \"/home/dichik/PhpstormProjects/web-laba-2/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css'; // import sendEmail from './Mailer'\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [textMessage, setTextMessage] = useState(\"\");\n  const [submitBlocked, setSubmitBlocked] = useState(false);\n  let regEmail = /^[a-zA-Z-0-9]+@[a-zA-Z-0-9]+\\.[A-Za-z]+$/;\n\n  const showErrorMessage = (str, errorNumber) => {// 1 - empty string in name or text\n    // 2 - smth wrong with email\n  };\n\n  const notEmpty = str => {\n    if (str === \"\") {\n      showErrorMessage(str, 1);\n      return false;\n    }\n\n    return true;\n  };\n\n  const checkEmail = () => {\n    if (!regEmail.test(email)) {\n      showErrorMessage(email, 2);\n      return false;\n    }\n\n    return true;\n  };\n\n  const submitData = () => {\n    if (!submitBlocked) {\n      setSubmitBlocked(true);\n\n      if (notEmpty(name) && notEmpty(textMessage) && checkEmail()) {\n        sendEmail(name, email, textMessage);\n      }\n    }\n  };\n\n  const resetData = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setTextMessage(\"\");\n    setSubmitBlocked(false);\n  };\n\n  const allFieldsEmpty = () => {\n    return email === \"\" && name === \"\" && textMessage === \"\";\n  };\n\n  const sendEmail = (name, email, textMessage) => {// console.log(name)\n  }; //  TODO add database connection (Supabase, or another)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"name\",\n      placeholder: \"Enter your name\",\n      className: \"inputField nameInputField centerBlock\",\n      value: name,\n      onChange: event => setName(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"Enter your email\",\n      value: email,\n      onChange: event => setEmail(event.target.value),\n      onFocus: setName(\"\"),\n      className: \"inputField emailInputField centerBlock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter your message here\",\n      value: textMessage,\n      onChange: event => setTextMessage(event.target.value),\n      className: \"inputField textField centerBlock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"centerBlock submitButton\",\n      onClick: submitData,\n      disabled: submitBlocked,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"centerBlock resetButton\",\n      disabled: allFieldsEmpty(),\n      onClick: resetData,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n} //TODO add css files\n\n\n_s(App, \"Ki3BTmYGdRBaxcR2Iie27tqrBu0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dichik/PhpstormProjects/web-laba-2/my-app/src/App.js"],"names":["useState","App","name","setName","email","setEmail","textMessage","setTextMessage","submitBlocked","setSubmitBlocked","regEmail","showErrorMessage","str","errorNumber","notEmpty","checkEmail","test","submitData","sendEmail","resetData","allFieldsEmpty","event","target","value"],"mappings":"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","sourcesContent":["import './App.css';\n// import sendEmail from './Mailer'\nimport {useState} from \"react\";\n\nfunction App() {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [textMessage, setTextMessage] = useState(\"\");\n    const [submitBlocked, setSubmitBlocked] = useState(false);\n\n    let regEmail = /^[a-zA-Z-0-9]+@[a-zA-Z-0-9]+\\.[A-Za-z]+$/\n\n    const showErrorMessage = (str, errorNumber) => {\n        // 1 - empty string in name or text\n        // 2 - smth wrong with email\n    }\n\n    const notEmpty = (str) => {\n        if(str === \"\") {\n            showErrorMessage(str, 1);\n            return false;\n        }\n        return true;\n    }\n\n    const checkEmail = () => {\n        if(!regEmail.test(email)) {\n            showErrorMessage(email, 2)\n            return false;\n        }\n        return true;\n    }\n\n    const submitData = () => {\n        if(!submitBlocked) {\n            setSubmitBlocked(true);\n            if(notEmpty(name) && notEmpty(textMessage) && checkEmail()) {\n                sendEmail(name, email, textMessage);\n            }\n        }\n    }\n\n    const resetData = () => {\n        setName(\"\");\n        setEmail(\"\");\n        setTextMessage(\"\");\n        setSubmitBlocked(false);\n    }\n\n    const allFieldsEmpty = () => {\n        return (email === \"\" && name === \"\" && textMessage === \"\");\n    }\n\n    const sendEmail = (name, email, textMessage) => {\n        // console.log(name)\n    }\n\n  //  TODO add database connection (Supabase, or another)\n  return (\n    <div>\n        {/*TODO message about a successfully sent data*/}\n        {/*TODO send email with a text*/}\n        {/*TODO add header*/}\n        <input type={\"name\"} placeholder={\"Enter your name\"}\n               className={\"inputField nameInputField centerBlock\"}\n               value={name}\n               onChange={event => setName(event.target.value)}\n        />\n        <input type={\"email\"} placeholder={\"Enter your email\"}\n               value={email}\n               onChange={(event => setEmail(event.target.value))}\n               onFocus={setName(\"\")}\n               className={\"inputField emailInputField centerBlock\"} />\n        <input type={\"text\"} placeholder={\"Enter your message here\"}\n               value={textMessage}\n               onChange={event => setTextMessage(event.target.value)}\n               className={\"inputField textField centerBlock\"} />\n        {/*TODO add speener*/}\n        <button className={\"centerBlock submitButton\"}\n                onClick={submitData}\n                disabled={submitBlocked}\n        >\n            Submit\n        </button>\n        <button className={\"centerBlock resetButton\"}\n                disabled={allFieldsEmpty()}\n                onClick={resetData}>\n            Reset\n        </button>\n    </div>\n  );\n}\n//TODO add css files\nexport default App;\n"]},"metadata":{},"sourceType":"module"}