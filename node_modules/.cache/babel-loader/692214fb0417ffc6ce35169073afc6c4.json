{"ast":null,"code":"var _jsxFileName = \"/home/dichik/PhpstormProjects/web-laba-2/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './global.css';\nimport { useState } from \"react\";\nimport Spinner from \"./Spinner\";\nimport { Mailer } from \"./Mailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [form, setForm] = useState({\n    name: '',\n    email: '',\n    textMessage: ''\n  });\n  const [submitBlocked, setSubmitBlocked] = useState(false);\n  const [activeField, setActiveField] = useState(0);\n  const [loading, setLoading] = useState(false);\n  let regEmail = /^[a-zA-Z-0-9]+@[a-zA-Z-0-9]+\\.[A-Za-z]+$/;\n\n  const showErrorMessage = (str, errorNumber) => {\n    if (errorNumber === 1) {\n      alert(\"There is an empty string...\");\n    } else if (errorNumber === 2) {\n      alert(\"There is something wrong with your email...\");\n    } else if (errorNumber === 3) {\n      alert(str);\n    }\n  };\n\n  const notEmpty = str => {\n    if (str === \"\") {\n      showErrorMessage(str, 1);\n      return false;\n    }\n\n    return true;\n  };\n\n  const checkEmail = () => {\n    if (!regEmail.test(form.email)) {\n      showErrorMessage(form.email, 2);\n      return false;\n    }\n\n    return true;\n  };\n\n  const wait = async () => {\n    setTimeout(() => console.log(\"Loading...\"), 5000);\n  };\n\n  const submitData = async () => {\n    if (!submitBlocked) {\n      setSubmitBlocked(true);\n\n      if (notEmpty(form.name) && notEmpty(form.textMessage) && checkEmail()) {\n        setLoading(true);\n        await wait();\n        await Mailer(form);\n        resetData();\n      } else setSubmitBlocked(false);\n    }\n  };\n\n  const resetData = async () => {\n    setForm({\n      name: '',\n      email: '',\n      textMessage: ''\n    });\n    setSubmitBlocked(false);\n    setActiveField(0);\n    setLoading(false);\n  };\n\n  const allFieldsEmpty = () => {\n    return form.email === \"\" && form.name === \"\" && form.textMessage === \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"headerClass\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sending message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"name\",\n        placeholder: \"Enter your name\",\n        className: \"inputField nameInputField centerBlock\",\n        value: form,\n        onChange: event => setForm(event.target.value, form.email, form.textMessage),\n        onFocus: () => setActiveField(1),\n        onBlur: () => setActiveField(0),\n        style: {\n          borderBottom: activeField === 1 ? '3px solid #10fc2a' : null\n        } // TODO light-green color if a field is filled\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Enter your email\",\n        value: form,\n        onChange: event => setForm(form.name, event.target.value, form.textMessage),\n        onFocus: () => setActiveField(2),\n        onBlur: () => setActiveField(0),\n        style: {\n          borderBottom: activeField === 2 ? '3px solid #10fc2a' : null\n        },\n        className: \"inputField emailInputField centerBlock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your message here\",\n        value: form,\n        onChange: event => setForm(form.name, form.email, event.target.value),\n        className: \"inputField textField centerBlock\",\n        onFocus: () => setActiveField(3),\n        onBlur: () => setActiveField(0),\n        style: {\n          borderBottom: activeField === 3 ? '3px solid #10fc2a' : null\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"centerBlock submitButton\",\n        onClick: submitData,\n        disabled: submitBlocked,\n        style: {\n          background: submitBlocked ? '#05acbb' : null\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"centerBlock resetButton\",\n        disabled: allFieldsEmpty(),\n        onClick: resetData,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }, this) : Spinner()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"YSzhJ5QJFHfE04ZzRyGbcHNDELY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dichik/PhpstormProjects/web-laba-2/my-app/src/App.js"],"names":["useState","Spinner","Mailer","App","form","setForm","name","email","textMessage","submitBlocked","setSubmitBlocked","activeField","setActiveField","loading","setLoading","regEmail","showErrorMessage","str","errorNumber","alert","notEmpty","checkEmail","test","wait","setTimeout","console","log","submitData","resetData","allFieldsEmpty","event","target","value","borderBottom","background"],"mappings":"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","sourcesContent":["import './global.css';\nimport {useState} from \"react\";\nimport Spinner from \"./Spinner\";\nimport {Mailer} from \"./Mailer\";\n\nfunction App() {\n    const [form, setForm] = useState({\n        name: '',\n        email: '',\n        textMessage: ''\n    })\n\n    const [submitBlocked, setSubmitBlocked] = useState(false);\n    const [activeField, setActiveField] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    let regEmail = /^[a-zA-Z-0-9]+@[a-zA-Z-0-9]+\\.[A-Za-z]+$/\n\n    const showErrorMessage = (str, errorNumber) => {\n        if(errorNumber === 1) {\n            alert(\"There is an empty string...\");\n        } else if(errorNumber === 2) {\n            alert(\"There is something wrong with your email...\");\n        } else if(errorNumber === 3) {\n            alert(str)\n        }\n    }\n\n    const notEmpty = (str) => {\n        if(str === \"\") {\n            showErrorMessage(str, 1);\n            return false;\n        }\n        return true;\n    }\n\n    const checkEmail = () => {\n        if(!regEmail.test(form.email)) {\n            showErrorMessage(form.email, 2)\n            return false;\n        }\n        return true;\n    }\n\n    const wait = async () => {\n        setTimeout(() => console.log(\"Loading...\"), 5000)\n    }\n\n    const submitData = async () => {\n        if (!submitBlocked) {\n            setSubmitBlocked(true);\n            if (notEmpty(form.name) && notEmpty(form.textMessage) && checkEmail()) {\n                setLoading(true)\n                await wait()\n                await Mailer(form)\n                resetData()\n            } else setSubmitBlocked(false);\n        }\n    }\n\n    const resetData = async () => {\n        setForm({name: '', email: '', textMessage: ''})\n        setSubmitBlocked(false);\n        setActiveField(0);\n        setLoading(false)\n    }\n\n    const allFieldsEmpty = () => {\n        return (form.email === \"\" && form.name === \"\" && form.textMessage === \"\");\n    }\n\n  return (\n      <div>\n          { !loading ?\n          <div>\n              <header className={\"headerClass\"}>\n                  <h1>Sending message</h1>\n              </header>\n              <input type={\"name\"} placeholder={\"Enter your name\"}\n                     className={\"inputField nameInputField centerBlock\"}\n                     value={form}\n                     onChange={event => setForm(event.target.value, form.email, form.textMessage)}\n                     onFocus={() => setActiveField(1)}\n                     onBlur={() => setActiveField(0)}\n                     style={{\n                         borderBottom: activeField === 1 ? '3px solid #10fc2a' : null\n                     }}\n                  // TODO light-green color if a field is filled\n              />\n              <input type={\"email\"} placeholder={\"Enter your email\"}\n                     value={form}\n                     onChange={(event => setForm(form.name, event.target.value, form.textMessage))}\n                     onFocus={() => setActiveField(2)}\n                     onBlur={() => setActiveField(0)}\n                     style={{\n                         borderBottom: activeField === 2 ? '3px solid #10fc2a' : null\n                     }}\n                     className={\"inputField emailInputField centerBlock\"}\n              />\n              {/*TODO red color if a field has error for a 3 seconds*/}\n              <input type={\"text\"} placeholder={\"Enter your message here\"}\n                     value={form}\n                     onChange={event => setForm(form.name, form.email, event.target.value)}\n                     className={\"inputField textField centerBlock\"}\n                     onFocus={() => setActiveField(3)}\n                     onBlur={() => setActiveField(0)}\n                     style={{\n                         borderBottom: activeField === 3 ? '3px solid #10fc2a' : null\n                     }}\n              />\n              <button className={\"centerBlock submitButton\"}\n                      onClick={submitData}\n                      disabled={submitBlocked}\n                      style={{\n                          background: submitBlocked ? '#05acbb' : null\n                      }}\n              >\n                  Submit\n              </button>\n              <button className={\"centerBlock resetButton\"}\n                      disabled={allFieldsEmpty()}\n                      onClick={resetData}>\n                  Clear\n              </button>\n          </div> : Spinner()\n          }\n      </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}