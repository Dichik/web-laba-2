{"ast":null,"code":"var _jsxFileName = \"/home/dichik/PhpstormProjects/web-laba-2/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState } from \"react\";\nimport Spinner from \"./Spinner\";\nimport emailjs from 'emailjs-com';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [textMessage, setTextMessage] = useState(\"\");\n  const [submitBlocked, setSubmitBlocked] = useState(false);\n  const [activeField, setActiveField] = useState(0);\n  const [loading, setLoading] = useState(false);\n  let regEmail = /^[a-zA-Z-0-9]+@[a-zA-Z-0-9]+\\.[A-Za-z]+$/;\n\n  const showErrorMessage = (str, errorNumber) => {\n    if (errorNumber === 1) {\n      alert(\"There is an empty string...\");\n    } else if (errorNumber === 2) {\n      alert(\"There is something wrong with your email...\");\n    } else if (errorNumber === 3) {\n      alert(str);\n    }\n  };\n\n  const notEmpty = str => {\n    if (str === \"\") {\n      showErrorMessage(str, 1);\n      return false;\n    }\n\n    return true;\n  };\n\n  const checkEmail = () => {\n    if (!regEmail.test(email)) {\n      showErrorMessage(email, 2);\n      return false;\n    }\n\n    return true;\n  };\n\n  const wait = async () => {\n    setTimeout(() => console.log(\"Loading...\"), 5000);\n  };\n\n  const submitData = async () => {\n    if (!submitBlocked) {\n      setSubmitBlocked(true);\n\n      if (notEmpty(name) && notEmpty(textMessage) && checkEmail()) {\n        setLoading(true);\n        const responseFromTimeout = await wait();\n        const responseFromSending = await sendEmail(name, email, textMessage);\n      } else setSubmitBlocked(false);\n    }\n  }; // TODO ліміт запитів до 1000\n\n\n  const resetData = async () => {\n    setName(\"\");\n    setEmail(\"\");\n    setTextMessage(\"\");\n    setSubmitBlocked(false);\n    setActiveField(0);\n    setLoading(false);\n  };\n\n  const allFieldsEmpty = () => {\n    return email === \"\" && name === \"\" && textMessage === \"\";\n  };\n\n  const showMessageAboutSuccess = () => {\n    alert(\"Your message was successfully sent\");\n    resetData();\n  };\n\n  const sendEmail = async () => {\n    emailjs.init(\"user_AJGy3zMpNl2Rxs4CFFafD\");\n    let form = {\n      name: name,\n      email: email,\n      textMessage: textMessage\n    };\n    emailjs.send('service_tauvzqc', 'template_26nh4ab', form).then(result => {\n      console.log(result.text);\n      showMessageAboutSuccess();\n    }, error => {\n      console.log(error.text);\n      showErrorMessage(\"Error, your message wasn't sent\", 3);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"headerClass\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sending message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"name\",\n        placeholder: \"Enter your name\",\n        className: \"inputField nameInputField centerBlock\",\n        value: name,\n        onChange: event => setName(event.target.value),\n        onFocus: () => setActiveField(1),\n        onBlur: () => setActiveField(0),\n        style: {\n          borderBottom: activeField === 1 ? '3px solid #10fc2a' : null\n        } // TODO light-green color if a field is filled\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Enter your email\",\n        value: email,\n        onChange: event => setEmail(event.target.value),\n        onFocus: () => setActiveField(2),\n        onBlur: () => setActiveField(0),\n        style: {\n          borderBottom: activeField === 2 ? '3px solid #10fc2a' : null\n        },\n        className: \"inputField emailInputField centerBlock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your message here\",\n        value: textMessage,\n        onChange: event => setTextMessage(event.target.value),\n        className: \"inputField textField centerBlock\",\n        onFocus: () => setActiveField(3),\n        onBlur: () => setActiveField(0),\n        style: {\n          borderBottom: activeField === 3 ? '3px solid #10fc2a' : null\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"centerBlock submitButton\",\n        onClick: submitData,\n        disabled: submitBlocked,\n        style: {\n          background: submitBlocked ? '#05acbb' : null\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"centerBlock resetButton\",\n        disabled: allFieldsEmpty(),\n        onClick: resetData,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }, this) : Spinner()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 7\n  }, this);\n} //TODO add css files\n\n\n_s(App, \"uWaB+qMITNZrz/YUzJwVMzHBSAU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dichik/PhpstormProjects/web-laba-2/my-app/src/App.js"],"names":["useState","Spinner","emailjs","App","name","setName","email","setEmail","textMessage","setTextMessage","submitBlocked","setSubmitBlocked","activeField","setActiveField","loading","setLoading","regEmail","showErrorMessage","str","errorNumber","alert","notEmpty","checkEmail","test","wait","setTimeout","console","log","submitData","responseFromTimeout","responseFromSending","sendEmail","resetData","allFieldsEmpty","showMessageAboutSuccess","init","form","send","then","result","text","error","event","target","value","borderBottom","background"],"mappings":"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","sourcesContent":["import './App.css';\nimport {useState} from \"react\";\nimport Spinner from \"./Spinner\";\nimport emailjs from 'emailjs-com'\n\nfunction App() {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [textMessage, setTextMessage] = useState(\"\");\n    const [submitBlocked, setSubmitBlocked] = useState(false);\n    const [activeField, setActiveField] = useState(0);\n    const [loading, setLoading] = useState(false);\n\n    let regEmail = /^[a-zA-Z-0-9]+@[a-zA-Z-0-9]+\\.[A-Za-z]+$/\n\n    const showErrorMessage = (str, errorNumber) => {\n        if(errorNumber === 1) {\n            alert(\"There is an empty string...\");\n        } else if(errorNumber === 2) {\n            alert(\"There is something wrong with your email...\");\n        } else if(errorNumber === 3) {\n            alert(str)\n        }\n    }\n\n    const notEmpty = (str) => {\n        if(str === \"\") {\n            showErrorMessage(str, 1);\n            return false;\n        }\n        return true;\n    }\n\n    const checkEmail = () => {\n        if(!regEmail.test(email)) {\n            showErrorMessage(email, 2)\n            return false;\n        }\n        return true;\n    }\n\n    const wait = async () => {\n        setTimeout(() => console.log(\"Loading...\"), 5000)\n    }\n\n    const submitData = async () => {\n        if (!submitBlocked) {\n            setSubmitBlocked(true);\n            if (notEmpty(name) && notEmpty(textMessage) && checkEmail()) {\n                setLoading(true)\n                const responseFromTimeout = await wait()\n                const responseFromSending = await sendEmail(name, email, textMessage)\n            } else setSubmitBlocked(false);\n        }\n    }\n\n    // TODO ліміт запитів до 1000\n\n    const resetData = async () => {\n        setName(\"\");\n        setEmail(\"\");\n        setTextMessage(\"\");\n        setSubmitBlocked(false);\n        setActiveField(0);\n        setLoading(false)\n    }\n\n    const allFieldsEmpty = () => {\n        return (email === \"\" && name === \"\" && textMessage === \"\");\n    }\n\n    const showMessageAboutSuccess = () => {\n        alert(\"Your message was successfully sent\")\n        resetData()\n    }\n\n    const sendEmail = async () => {\n        emailjs.init(\"user_AJGy3zMpNl2Rxs4CFFafD\");\n        let form = {\n            name: name,\n            email: email,\n            textMessage: textMessage\n        }\n        emailjs.send('service_tauvzqc', 'template_26nh4ab', form)\n            .then((result) => {\n                console.log(result.text);\n                showMessageAboutSuccess();\n            }, (error) => {\n                console.log(error.text);\n                showErrorMessage(\"Error, your message wasn't sent\", 3)\n            });\n    }\n\n  return (\n      <div>\n          { !loading ?\n          <div>\n              {/*TODO message about a successfully sent data*/}\n              {/*TODO add header*/}\n              <header className={\"headerClass\"}>\n                  <h1>Sending message</h1>\n              </header>\n              <input type={\"name\"} placeholder={\"Enter your name\"}\n                     className={\"inputField nameInputField centerBlock\"}\n                     value={name}\n                     onChange={event => setName(event.target.value)}\n                     onFocus={() => setActiveField(1)}\n                     onBlur={() => setActiveField(0)}\n                     style={{\n                         borderBottom: activeField === 1 ? '3px solid #10fc2a' : null\n                     }}\n                  // TODO light-green color if a field is filled\n              />\n              <input type={\"email\"} placeholder={\"Enter your email\"}\n                     value={email}\n                     onChange={(event => setEmail(event.target.value))}\n                     onFocus={() => setActiveField(2)}\n                     onBlur={() => setActiveField(0)}\n                     style={{\n                         borderBottom: activeField === 2 ? '3px solid #10fc2a' : null\n                     }}\n                     className={\"inputField emailInputField centerBlock\"}\n              />\n              {/*TODO red color if a field has error for a 3 seconds*/}\n              <input type={\"text\"} placeholder={\"Enter your message here\"}\n                     value={textMessage}\n                     onChange={event => setTextMessage(event.target.value)}\n                     className={\"inputField textField centerBlock\"}\n                     onFocus={() => setActiveField(3)}\n                     onBlur={() => setActiveField(0)}\n                     style={{\n                         borderBottom: activeField === 3 ? '3px solid #10fc2a' : null\n                     }}\n              />\n              <button className={\"centerBlock submitButton\"}\n                      onClick={submitData}\n                      disabled={submitBlocked}\n                      style={{\n                          background: submitBlocked ? '#05acbb' : null\n                      }}\n              >\n                  Submit\n              </button>\n              <button className={\"centerBlock resetButton\"}\n                      disabled={allFieldsEmpty()}\n                      onClick={resetData}>\n                  Clear\n              </button>\n          </div> : Spinner()\n          }\n      </div>\n  );\n}\n//TODO add css files\nexport default App;\n"]},"metadata":{},"sourceType":"module"}